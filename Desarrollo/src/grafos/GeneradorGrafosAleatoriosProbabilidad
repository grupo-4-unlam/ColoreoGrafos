package grafos;

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

public class GeneradorGrafosAleatoriosProbabilidad {
	private boolean mat[][];
	private double probArista;
	private int cantNodos;
	private float porcentajeAdy;
	private int gradMin;
	private int gradMax;
	private int cantAristas;
	
	public GeneradorGrafosAleatoriosProbabilidad(float probArista, int cantAristas){
		this.probArista = probArista/100;
		this.cantNodos = cantAristas;
		this.mat = new boolean[cantNodos][cantNodos];
		
		for (int i = 0; i<cantNodos;i++) {
			for(int j = 0; j<cantNodos; j++ )
				this.mat[i][j] = false;
			
		}
		this.cantAristas = 0;
	}
	
	
	public Grafo generarGrafo() throws IOException{
		
		//PrintWriter salida = new  PrintWriter (new FileWriter("grafo.in")); PONER AL FINAL.
	//	int gradMax = 0;
		//int gradMin = 0;
		int gradActual = 0;
		for (int i = 0; i<this.cantNodos; i++ ){
			for(int j = i+1; j<this.cantNodos;j++){
				if(Math.random()<probArista){
					mat[i][j] = true;
					this.cantAristas++;
					gradActual++;
				}
			} /// UNA VEZ QUE TERMINA DE PONER LAS ARISTAS EN UN NODO COMPARA LA CANT DE ARISTAS CON EL NODO DE GRADO MENOR Y MAYOR
			if (gradActual>gradMax)
				this.gradMax = gradActual;
			if(gradActual<gradMin || gradMin == 0)
				this.gradMin = gradActual;
			gradActual = 0;  //Como empiezo con un nuevo nodo le asigno a gradoActual el valor 0.
		}
		this.porcentajeAdy = cantAristas/this.cantNodos;
		Grafo grafo = new Grafo(mat,cantNodos);		
		return grafo;
	}


	public boolean[][] getMat() {
		return mat;
	}


	public double getProbArista() {
		return probArista;
	}


	public int getCantNodos() {
		return cantNodos;
	}


	public float getPorcentajeAdy() {
		return porcentajeAdy;
	}


	public int getGradMin() {
		return gradMin;
	}


	public int getGradMax() {
		return gradMax;
	}


	public int getCantAristas() {
		return cantAristas;
	}
	
	
}
